---------------------
 HashMap - since 1.2
---------------------

public class HashMap<K,V>
extends AbstractMap<K,V>
implements Map<K,V>, Cloneable, Serializable

- Hash table based implementation of the Map interface
- O(1) for get, put and remove
- insertion order is not preserved
- permits null values and one null key
- not synchronized unlike Hashtable

The HashMap class is roughly equivalent to Hashtable, except that it is unsynchronized and permits nulls.

Note that this implementation is not synchronized.
If multiple threads access a hash map concurrently, and at least one of the threads modifies the map structurally, it must be synchronized externally. (A structural modification is any operation that adds or deletes one or more mappings; merely changing the value associated with a key that an instance already contains is not a structural modification.)
This is typically accomplished by synchronizing on some object that naturally encapsulates the map.
If no such object exists, the map should be "wrapped" using the Collections.synchronizedMap method.
This is best done at creation time, to prevent accidental unsynchronized access to the map:

   Map m = Collections.synchronizedMap(new HashMap(...));

equal and hashCode contract in Java :

- if two objects are equal, they should have the same hash codes as well


Low level implementation of HashMap :

HashMap is an array of Nodes.

Node<K, V>[] table;

------------
 Node<K, V>
------------
int hash;
K key;
V value;
Node<K, V> next;

So Node is a Linked List.

And HashMap is an array of Linked Lists.

Each index in the array is known as a Bucket.
Each bucket is a linked list of nodes.

An instance of HashMap has two parameters that affect its performance:
- initial capacity, and
- load factor
The capacity is the number of buckets in the hash table, and the initial capacity is simply the capacity at the time the hash table is created.

The load factor (default load factor .75) is a measure of how full the hash table is allowed to get before its capacity is automatically increased.
When the number of entries in the hash table exceeds the product of the load factor and the current capacity, the hash table is rehashed (that is, internal data structures are rebuilt) so that the hash table has approximately twice the number of buckets.

-------------------
 hashCode() method
-------------------
hashCode() method is used to get the hash Code of an object.
hashCode() method of object class returns the memory reference of object in integer form.
Definition of hashCode() method is public native hashCode().
It indicates the implementation of hashCode() is native because there is not any direct method in java to fetch the reference of object.
It is possible to provide your own implementation of hashCode().
In HashMap, hashCode() is used to calculate the bucket and therefore calculate the index.


-----------------
 equals() method
-----------------
equals method is used to check that 2 objects are equal or not.
This method is provided by Object class. You can override this in your class to provide your own implementation.
HashMap uses equals() to compare the key whether the are equal or not.
If equals() method return true, they are equal otherwise not equal.


---------
 Buckets
---------
A bucket is one element of HashMap array. It is used to store nodes.
Two or more nodes can have the same bucket.
In that case link list structure is used to connect the nodes.
Buckets are different in capacity.

A relation between bucket and capacity is as follows:

capacity = number of buckets * load factor


A single bucket can have more than one nodes, it depends on hashCode() method.
The better your hashCode() method is, the better your buckets will be utilized.


------------------------------
 Index Calculation in HashMap
-----------------------------
Hash code of key may be large enough to create an array.
hash code generated may be in the range of integer and if we create arrays for such a range, then it will easily cause outOfMemoryException.
So we generate index to minimize the size of array.

Basically following operation is performed to calculate index:

index = hashCode(key) & (n-1);

where n is number of buckets or the size of array.

The default number is 16.

HashMap allows a null key which always goes to index 0 as hash code of null is 0.

Objects.hash(null); --> 0


---------------------------
 HashMap Changes in Java 8
---------------------------

In Java 8, when we have too many unequal keys which give the same hashCode (index) i.e. when the number of items
in a hash bucket grows beyond certain threshold (TREEIFY_THRESHOLD = 8), content of that bucket switches from using
a linked list of Entry objects to a balanced search tree.

This theoretically improves the worst case performance from O(n) to O(log n).

* Balanced Search Tree -> left nodes have lesser weight than the right nodes.